name: Ultimate Exchange Rate Scraper (AUD, USD, EUR & GBP)

on:
  schedule:
    # Run at 6:00 AM Sri Lanka Time (UTC+5:30 = 00:30 UTC)
    - cron: '30 0 * * *'
    # Run at 8:00 AM Sri Lanka Time (UTC+5:30 = 02:30 UTC)
    - cron: '30 2 * * *'
    # Run at 10:00 AM Sri Lanka Time (UTC+5:30 = 04:30 UTC)
    - cron: '30 4 * * *'
    # Run at 12:00 PM Sri Lanka Time (UTC+5:30 = 06:30 UTC)
    - cron: '30 6 * * *'
    # Run at 4:00 PM Sri Lanka Time (UTC+5:30 = 12:30 UTC)
    - cron: '30 10 * * *'
  workflow_dispatch: # Allows manual triggering for testing

env:
  TZ: Asia/Colombo

jobs:
  scrape-all-currencies:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg unzip
    
    - name: Install Google Chrome and setup ChromeDriver
      run: |
        # Install Google Chrome Stable
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # Get installed Chrome version
        CHROME_VERSION=$(google-chrome --version | awk '{print $3}')
        echo "‚úÖ Installed Chrome version: $CHROME_VERSION"
        
        # Extract major version
        CHROME_MAJOR_VERSION=$(echo $CHROME_VERSION | cut -d'.' -f1)
        echo "Chrome major version: $CHROME_MAJOR_VERSION"
        
        # Remove old chromedriver if exists to avoid conflicts
        sudo rm -f /usr/bin/chromedriver
        echo "üóëÔ∏è Removed old ChromeDriver from system PATH"
        
        echo "üì¶ webdriver-manager will auto-install matching ChromeDriver during script execution"
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "‚úÖ Python dependencies installed (including webdriver-manager)"
    
    - name: Display current time (Sri Lanka)
      run: |
        echo "Current UTC time: $(date -u)"
        echo "Current Sri Lanka time: $(TZ=Asia/Colombo date)"
        echo "üåç Starting comprehensive exchange rate scraping for AUD, USD, EUR, and GBP"
        echo "=================================================="
    
    - name: Run AUD exchange rate scraper
      env:
        MONGODB_CONNECTION_STRING: ${{ secrets.MONGODB_CONNECTION_STRING }}
      run: |
        echo "üá¶üá∫ Starting AUD exchange rate scraper..."
        python daily_aud_rate_scraper.py
        echo "‚úÖ AUD scraper completed"
    
    - name: Wait between AUD and USD scrapers
      run: |
        echo "‚è∏Ô∏è Waiting 60 seconds between AUD and USD scrapers..."
        sleep 60
    
    - name: Run USD exchange rate scraper
      env:
        MONGODB_CONNECTION_STRING: ${{ secrets.MONGODB_CONNECTION_STRING }}
      run: |
        echo "üá∫üá∏ Starting USD exchange rate scraper..."
        python daily_usd_rate_scraper.py
        echo "‚úÖ USD scraper completed"
    
    - name: Wait between USD and EUR scrapers
      run: |
        echo "‚è∏Ô∏è Waiting 60 seconds between USD and EUR scrapers..."
        sleep 60
    
    - name: Run EUR exchange rate scraper
      env:
        MONGODB_CONNECTION_STRING: ${{ secrets.MONGODB_CONNECTION_STRING }}
      run: |
        echo "üá™üá∫ Starting EUR exchange rate scraper..."
        python daily_eur_rate_scraper.py
        echo "‚úÖ EUR scraper completed"
    
    - name: Wait between EUR and GBP scrapers
      run: |
        echo "‚è∏Ô∏è Waiting 60 seconds between EUR and GBP scrapers..."
        sleep 60
    
    - name: Run GBP exchange rate scraper
      env:
        MONGODB_CONNECTION_STRING: ${{ secrets.MONGODB_CONNECTION_STRING }}
      run: |
        echo "üá¨üáß Starting GBP exchange rate scraper..."
        python daily_gbp_rate_scraper.py
        echo "‚úÖ GBP scraper completed"
    
    - name: Upload all execution summaries
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ultimate-exchange-rate-summaries-${{ github.run_number }}
        path: |
          execution_summary.json
          usd_execution_summary.json
          eur_execution_summary.json
          gbp_execution_summary.json
        retention-days: 30
    
    - name: Upload logs and screenshots
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ultimate-exchange-rate-logs-${{ github.run_number }}
        path: |
          logs/
          screenshots/
        retention-days: 7
    
    - name: Upload failure artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: ultimate-exchange-rate-failure-logs-${{ github.run_number }}
        path: |
          logs/
          screenshots/
          execution_summary.json
          usd_execution_summary.json
          eur_execution_summary.json
          gbp_execution_summary.json
        retention-days: 14

    - name: Ultimate comprehensive summary report
      if: always()
      run: |
        echo "üìã ULTIMATE EXCHANGE RATE EXECUTION SUMMARY"
        echo "==========================================="
        echo "Execution Time: $(TZ=Asia/Colombo date)"
        echo "Total Currencies: 4 (AUD, USD, EUR, GBP)"
        echo ""
        
        # AUD Summary
        echo "üá¶üá∫ AUD EXCHANGE RATES:"
        echo "========================"
        if [ -f "execution_summary.json" ]; then
          echo "‚úÖ AUD scraping completed successfully"
          if command -v jq &> /dev/null; then
            echo "   Banks scraped: $(jq -r '.total_banks_scraped' execution_summary.json)"
            echo "   Best to sell AUD: $(jq -r '.best_rate_to_sell_aud.bank' execution_summary.json) - LKR $(jq -r '.best_rate_to_sell_aud.rate' execution_summary.json)"
            echo "   Best to buy AUD: $(jq -r '.best_rate_to_buy_aud.bank' execution_summary.json) - LKR $(jq -r '.best_rate_to_buy_aud.rate' execution_summary.json)"
            echo "   Average buying rate: LKR $(jq -r '.average_buying_rate' execution_summary.json)"
            echo "   Average selling rate: LKR $(jq -r '.average_selling_rate' execution_summary.json)"
          fi
        else
          echo "‚ùå AUD scraping failed - summary not found"
        fi
        echo ""
        
        # USD Summary  
        echo "üá∫üá∏ USD EXCHANGE RATES:"
        echo "========================"
        if [ -f "usd_execution_summary.json" ]; then
          echo "‚úÖ USD scraping completed successfully"
          if command -v jq &> /dev/null; then
            echo "   Banks scraped: $(jq -r '.total_banks_scraped' usd_execution_summary.json)"
            echo "   Best to sell USD: $(jq -r '.best_rate_to_sell_usd.bank' usd_execution_summary.json) - LKR $(jq -r '.best_rate_to_sell_usd.rate' usd_execution_summary.json)"
            echo "   Best to buy USD: $(jq -r '.best_rate_to_buy_usd.bank' usd_execution_summary.json) - LKR $(jq -r '.best_rate_to_buy_usd.rate' usd_execution_summary.json)"
            echo "   Average buying rate: LKR $(jq -r '.average_buying_rate' usd_execution_summary.json)"
            echo "   Average selling rate: LKR $(jq -r '.average_selling_rate' usd_execution_summary.json)"
          fi
        else
          echo "‚ùå USD scraping failed - summary not found"
        fi
        echo ""
        
        # EUR Summary
        echo "üá™üá∫ EUR EXCHANGE RATES:"
        echo "========================"
        if [ -f "eur_execution_summary.json" ]; then
          echo "‚úÖ EUR scraping completed successfully"
          if command -v jq &> /dev/null; then
            echo "   Banks scraped: $(jq -r '.total_banks_scraped' eur_execution_summary.json)"
            echo "   Best to sell EUR: $(jq -r '.best_rate_to_sell_eur.bank' eur_execution_summary.json) - LKR $(jq -r '.best_rate_to_sell_eur.rate' eur_execution_summary.json)"
            echo "   Best to buy EUR: $(jq -r '.best_rate_to_buy_eur.bank' eur_execution_summary.json) - LKR $(jq -r '.best_rate_to_buy_eur.rate' eur_execution_summary.json)"
            echo "   Average buying rate: LKR $(jq -r '.average_buying_rate' eur_execution_summary.json)"
            echo "   Average selling rate: LKR $(jq -r '.average_selling_rate' eur_execution_summary.json)"
          fi
        else
          echo "‚ùå EUR scraping failed - summary not found"
        fi
        echo ""
        
        # GBP Summary
        echo "üá¨üáß GBP EXCHANGE RATES:"
        echo "========================"
        if [ -f "gbp_execution_summary.json" ]; then
          echo "‚úÖ GBP scraping completed successfully"
          if command -v jq &> /dev/null; then
            echo "   Banks scraped: $(jq -r '.total_banks_scraped' gbp_execution_summary.json)"
            echo "   Best to sell GBP: $(jq -r '.best_rate_to_sell_gbp.bank' gbp_execution_summary.json) - LKR $(jq -r '.best_rate_to_sell_gbp.rate' gbp_execution_summary.json)"
            echo "   Best to buy GBP: $(jq -r '.best_rate_to_buy_gbp.bank' gbp_execution_summary.json) - LKR $(jq -r '.best_rate_to_buy_gbp.rate' gbp_execution_summary.json)"
            echo "   Average buying rate: LKR $(jq -r '.average_buying_rate' gbp_execution_summary.json)"
            echo "   Average selling rate: LKR $(jq -r '.average_selling_rate' gbp_execution_summary.json)"
          fi
        else
          echo "‚ùå GBP scraping failed - summary not found"
        fi
        echo ""
        
        # Overall Summary
        echo "üìä OVERALL EXECUTION STATUS:"
        echo "============================="
        
        total_successes=0
        if [ -f "execution_summary.json" ]; then
          total_successes=$((total_successes + 1))
        fi
        if [ -f "usd_execution_summary.json" ]; then
          total_successes=$((total_successes + 1))
        fi
        if [ -f "eur_execution_summary.json" ]; then
          total_successes=$((total_successes + 1))
        fi
        if [ -f "gbp_execution_summary.json" ]; then
          total_successes=$((total_successes + 1))
        fi
        
        echo "Successful currency scrapers: $total_successes/4"
        
        if [ $total_successes -eq 4 ]; then
          echo "üéâ All 4 currency scrapers completed successfully!"
          echo "üèÜ Perfect execution - AUD, USD, EUR, and GBP all updated!"
        elif [ $total_successes -eq 3 ]; then
          echo "‚ö†Ô∏è 3 out of 4 currency scrapers completed successfully"
        elif [ $total_successes -eq 2 ]; then
          echo "‚ö†Ô∏è 2 out of 4 currency scrapers completed successfully"
        elif [ $total_successes -eq 1 ]; then
          echo "‚ö†Ô∏è Only 1 out of 4 currency scrapers completed successfully"
        else
          echo "‚ùå All currency scrapers failed"
        fi
        
        echo ""
        echo "üìà MongoDB Collections Updated:"
        echo "   ‚Ä¢ exchange_rates.daily_aud_rates üá¶üá∫"
        echo "   ‚Ä¢ exchange_rates.daily_usd_rates üá∫üá∏"
        echo "   ‚Ä¢ exchange_rates.daily_eur_rates üá™üá∫"
        echo "   ‚Ä¢ exchange_rates.daily_gbp_rates üá¨üáß"
        echo ""
        
        # Rate comparison summary
        echo "üí± BEST RATES ACROSS ALL CURRENCIES:"
        echo "===================================="
        
        if command -v jq &> /dev/null; then
          # Show the highest value currency for selling (people perspective)
          echo "üèÜ Currency Value Rankings (for people selling foreign currency):"
          
          if [ -f "gbp_execution_summary.json" ]; then
            gbp_rate=$(jq -r '.best_rate_to_sell_gbp.rate' gbp_execution_summary.json 2>/dev/null || echo "0")
            echo "   ü•á GBP: LKR $gbp_rate ($(jq -r '.best_rate_to_sell_gbp.bank' gbp_execution_summary.json 2>/dev/null || echo "N/A"))"
          fi
          
          if [ -f "eur_execution_summary.json" ]; then
            eur_rate=$(jq -r '.best_rate_to_sell_eur.rate' eur_execution_summary.json 2>/dev/null || echo "0")
            echo "   ü•à EUR: LKR $eur_rate ($(jq -r '.best_rate_to_sell_eur.bank' eur_execution_summary.json 2>/dev/null || echo "N/A"))"
          fi
          
          if [ -f "usd_execution_summary.json" ]; then
            usd_rate=$(jq -r '.best_rate_to_sell_usd.rate' usd_execution_summary.json 2>/dev/null || echo "0")
            echo "   ü•â USD: LKR $usd_rate ($(jq -r '.best_rate_to_sell_usd.bank' usd_execution_summary.json 2>/dev/null || echo "N/A"))"
          fi
          
          if [ -f "execution_summary.json" ]; then
            aud_rate=$(jq -r '.best_rate_to_sell_aud.rate' execution_summary.json 2>/dev/null || echo "0")
            echo "   üèÖ AUD: LKR $aud_rate ($(jq -r '.best_rate_to_sell_aud.bank' execution_summary.json 2>/dev/null || echo "N/A"))"
          fi
        fi
        
        echo ""
        echo "‚ú® Ultimate exchange rate scraping workflow completed!"
        echo "üìä All data available in MongoDB Atlas for analysis and visualization"